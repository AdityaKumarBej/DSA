Construct Binary Tree from Preorder and Inorder Traversal

Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
class Solution
{
int index = 0;

public TreeNode buildTree(int [] preorder , int[] inorder)
{
  HashMap<Integer,Integer> hmap = new HashMap<Integer,Integer>();
  
  for(int i = 0 ; i < inorder.length ; i++)
  {
    hmap.put(inorder[i] , i);
  }
  int i_start = 0;
  int i_end = inorder.length;
  
  return helper(i_start , i_end , hmap , preorder , inorder);
}

public TreeNode helper(int i_start , int i_end , HashMap<Integer,Integer> hmap , int [] preorder , int [] inorder)
{
  if(i_start > i_end)
  {
    return null;
  }
  
  TreeNode root = new TreeNode(preorder[index++]);
  int pos = hmap.get(root.val);
  
  root.left = helper(i_start , pos , hmap , preorder , inorder);
  root.right = helper(pos+1 , i_end , hmap , preorder , inorder);
  
  return root;
  }
  }
  
  
  
  
