Pre order traversal - root -> Left Node -> Right Node
class Practice
{
static class Node
{
Node left;
Node right;
int value;

  Node(int value)
  {
    left = null;
    right = null;
    this.value = value;
  }
}

void insert(Node node , int value)
{
if(value < node.value)
  {
  if(node.left != null)
    {
    insert(node.left , value);
    }
  else
    {
    System.out.println("Inserted " + value + " to the left of " + node.value);
    node.left = new Node(value);
    }
   }
else if(value > node.right)
  {
  if(node.right != null)
    {
    insert(node.right , value);
    }
  else
    {
    System.out.println("Inserted " + value + " to the right of " + node.value);
    node.right = new Node(value);
    }
   }
}

void preOrder(Node node)
{
if(node != null)
  {
  System.out.println(" " + node.value);
  print(node.left);
  print(node.right);
  }
}

public static void main(String[] args)
{
Node root = new Node(55);
practice p = new practice();

    p.insert(root , 40);
    p.insert(root, 15);
    p.insert(root , 45);
    p.insert(root , 60);
    p.insert(root , 57);
    p.insert(root , 70);

    p.preOrder(root);
}
}

**************************************************************************************************

METHOD 2 : USING STACKS (ITERATIVE)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> list = new ArrayList<>();
        
        if(root == null)
        {
            return list;
        }
        
        Stack<TreeNode> s = new Stack<TreeNode>();
        
        s.push(root);
        while(!s.isEmpty())
        {
            TreeNode curr = s.pop();
            
            list.add(curr.val);
            
            
            if(curr.right != null)s.push(curr.right);
            if(curr.left != null)s.push(curr.left);
                            
        }
        return list;
    }
}
    
    
    
