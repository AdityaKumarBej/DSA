Given the binary Tree and the two nodes say ‘a’ and ‘b’, determine whether the two nodes are cousins of each other or not.
Two nodes are cousins of each other if they are at same level and have different parents.

     6
   /   \
  3     5
 / \   / \
7   8 1   3
Say two node be 7 and 1, result is TRUE.
Say two nodes are 3 and 5, result is FALSE.
Say two nodes are 7 and 5, result is FALSE.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution {
    public boolean isCousins(TreeNode root, int x, int y) 
    {
    TreeNode parent_x = findParent(root , x);
	TreeNode parent_y = findParent(root , y);

	int level_x = findLevel(root , x);
	int level_y = findLevel(root , y);

	if(parent_x != parent_y && level_x == level_y)
	{
		return true;
	}
	return false;

}

TreeNode findParent(TreeNode node , int value)
{
	if(node == null)
	{
		return null;
	}

	Queue<TreeNode> q = new LinkedList<>();
	q.add(node);

	while(!q.isEmpty())
	{
		TreeNode curr = q.poll();

		if(curr.left != null)
		{
			if(curr.left.val == value)
			{
				return curr;
			}
			q.add(curr.left);
		}
		if(curr.right != null)
		{
			if(curr.right.val == value)
			{
				return curr;
			}
			q.add(curr.right);
		}
	}
	return null;
}

int findLevel(TreeNode node , int value)
{
	if(node == null)
	{
		return 0;
	}
	int level = 1;

	Queue<TreeNode> q = new LinkedList<>();
	q.add(node);
	q.add(null);

	while(!q.isEmpty())
	{
		TreeNode curr = q.poll();

		if(curr == null)
		{
			if(!q.isEmpty())
			{
				q.add(null);
			}
			level++;
		}
		else
		{
		if(curr.val == value)
		{
			return level;
		}

		if(curr.left != null)
		{
			q.add(curr.left);
		}
		if(curr.right != null)
		{
			q.add(curr.right);
		}
		}
	}

	return 0;
}
    
        


}
