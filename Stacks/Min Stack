Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

class MinStack {
     Node head;
     public MinStack() {
        
    }
   class Node{
       Node next;
       int value;
       int min;
    }
   
    public void push(int x) 
    {
        if(head == null)
        {
            head = new Node();
            head.value = x;
            head.min = x;
        }
        else
        {
            Node temp = new Node();
            temp.value = x;
            temp.min = Math.min(x , head.min);
            temp.next = head;
            head = temp;    
        }
    }
    
    public void pop() {
        
        if(head != null)
        {
            head = head.next;
        }
    }
    
    public int top() {
        if(head != null)
        {
            return head.value;
        }
        return -1;        
    }
    
    public int getMin() 
    {
      return head.min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
