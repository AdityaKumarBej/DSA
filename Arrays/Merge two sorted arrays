1. MERGE TWO SORTED ARRAYS TO A THIRD ARRAY


public static void main(String[] args)
{
	int nums1[] = {1,2,3,0,0,0};
	int nums2[] = {2,5,6};

	int n = nums1.length();
	int m = nums2.length();

	int[] res = new int[n+m];

	int i = 0;
	int j = 0;
	int k = 0;

	while(i < n && j < m)
	{
		if(nums1[i] < nums2[j])
		{
			res[k] = nums1[i];
			i++; k++;
		}
		else
		{
			res[k] = nums2[j];
			k++; j++;
		}
	}

	while(i < n)
	{
		res[k] = nums1[i];
		k++; i++;
	}

	while(j < m)
	{
		res[k] = nums2[j];
		k++; j++;
	}

	System.out.println(Arrays.toString(res));

}

*************************************************************************************

2.  Merge Sorted Array

Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) 
    {

        int i = 0;
        int j = 0;
        int count = m+n-1;
        --m;
        --n;
        
        while(m >= 0 && n >= 0)
        {
            if(nums1[m] > nums2[n])
            {
               nums1[count--] = nums1[m--];
            }
            else
            {
               nums1[count--] = nums2[n--];
            }
        }
        while(n >= 0)
        {
            nums1[count--] = nums2[n--];
        }
        
    }
}
2. 
