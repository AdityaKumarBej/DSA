public class Trie {

    class TrieNode
    {
        Map<Character , TrieNode> children;
        boolean endOfWord;
        public TrieNode()
        {
            children = new HashMap<>();
            endOfWord = false;
        }
    }

    private final TrieNode root;

    public Trie()
    {
        root = new TrieNode();
    }

    public void insert(String word)
    {
        TrieNode current = root;
        for(int i = 0 ; i < word.length() ; i++)
        {
            char ch = word.charAt(i);
            TrieNode node = current.children.get(ch);
            if(node == null)
            {
                node = new TrieNode();
                current.children.put(ch , node);
            }
            current = node;
        }
        current.endOfWord = true;
    }

    public void insertRecursive(TrieNode current , String word , int index)
    {
        if(word.length() == index)
        {
            current.endOfWord = true;
            return;
        }
        char ch = word.charAt(index);
        TrieNode node = current.children.get(ch);

        if(node == null)
        {
            node = new TrieNode();
            current.children.put(ch , node);
        }
        insertRecursive(node , word , index+1);
    }

    public boolean search(String word)
    {
        TrieNode current = root;

        for(int i = 0 ; i < word.length() ; i++)
        {
            char ch = word.charAt(i);
            TrieNode node = current.children.get(ch);

            if(node == null)
            {
                return false;
            }
            current = node;
        }
        return current.endOfWord;
    }

    public boolean searchRecursive(TrieNode current , String word , int index)
    {
        if(index == word.length())
        {
            return current.endOfWord;
        }
        char ch = word.charAt(index);
        TrieNode node = current.children.get(ch);

        if(node == null)
        {
            return false;
        }
        return searchRecursive(current , word , index+1);
    }

    public boolean delete(String word , TrieNode current , int index)
    {
        if(index == word.length())
        {
            if(!current.endOfWord)
            {
                return false;
            }
            current.endOfWord = false;
            return current.children.size() == 0;
        }

        char ch = word.charAt(index);
        TrieNode node = current.children.get(ch);

        if(node == null)
        {
            return false;
        }

        boolean shouldDeleteCurrentNode = delete(word , node , index+1);

        if(shouldDeleteCurrentNode)
        {
            current.children.remove(ch);
            return current.children.size()==0;
        }
        return false;
    }


    public boolean startsWith(String prefix)
    {
        TrieNode current = root;

        for(int i = 0 ; i < prefix.length() ; i++)
        {
            char ch = prefix.charAt(i);
            TrieNode node = current.children.get(ch);
            if(node == null)
            {
                return false;
            }
            current = node;
        }
        return true;
    }

    public boolean startsWithRecursive(String prefix , TrieNode current , int index)
    {
        if(index == prefix.length())
        {
            return true;
        }
        char ch = prefix.charAt(index);
        TrieNode node = current.children.get(ch);

        if(node == null)
        {
            return false;
        }

        return startsWithRecursive(prefix , node , index+1);
    }
