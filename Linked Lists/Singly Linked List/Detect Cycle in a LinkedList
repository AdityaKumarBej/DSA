Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node

Example 2:

Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the first node.

Example 3:

Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


METHOD 1 : TWO POINTER METHOD

public class Solution {
    public boolean hasCycle(ListNode head) 
    {

     ListNode fast_ptr = head;
     ListNode slow_ptr = head;
        
        while(fast_ptr != null && fast_ptr.next != null)
        {
            fast_ptr = fast_ptr.next.next;
            slow_ptr = slow_ptr.next;
            
            if(fast_ptr == slow_ptr)
            {
                return true;
            }
        }
        return false;
    }
    
}


METHOD 2 : HASHSET

public class Solution {
    public boolean hasCycle(ListNode head) 
    {

        ListNode temp = head;
       
        HashSet<ListNode> hset = new HashSet<ListNode>();
        
        while(temp != null)
        {
            hset.add(temp);
             temp = temp.next;
            
            if(hset.contains(temp))
            {
                return true;
            }
        }
        
        
    return false;
    }
}
