You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.



class Solution {
    
    public ListNode head = null;
    public ListNode tail = null;
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        if(l1 == null || l2 == null)                          //WE CAN REVERSE BUT THE INPUT IS ALREADY REVERSED , l1 = reverse(l1) ; l2 = reverse(l2)
        {
            return null;
        }
        int sum = 0;
        int carry = 0;
        ListNode res = null;
        
        while(l1 != null || l2 != null)
        {
            sum = carry;
            
            if(l1 != null)
            {
                sum += l1.val;
                l1 = l1.next;
            }
            if(l2 != null)
            {
                sum += l2.val;
                l2 = l2.next;
            }
            
            carry = sum/10;
            sum = sum%10;
            
            res = insertNode(res , sum);
        }
        if(carry != 0)
        {
            res = insertNode(res , carry);
        }
        return res;
    }

 
    public ListNode insertNode(ListNode node , int key)
    { 
        ListNode new_node = new ListNode(key);
        
        if(head == null)
        {
            head = new_node;
            tail = new_node;
        }
        else
        {
            tail.next = new_node;
            tail = new_node;
        }
        
        return head;
            
    }
}
