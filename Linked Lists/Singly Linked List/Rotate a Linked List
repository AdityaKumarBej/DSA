1. CLOCKWISE


Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL


class Solution {
    public ListNode rotateRight(ListNode head, int k) 
    {
        ListNode curr = head;
        
        if(head== null)return null;
        
        ListNode endNode = head;
        
        
        ListNode temp = head;
        int len = 1;
        
        while(temp.next != null)
        {
            temp = temp.next;
            len++;
        }
        if(k > len)
        {
            k %= len;
        }
        k = len-k;
        

        if(k == 0 || k == len)
        {
            return head;
        }
        
        
        for(int i = 1 ; i < k ; i++)
        {
               curr = curr.next;             
        }
    
        
        if(curr == null)return head;    
        
        ListNode kthNode = curr;
        
        while(curr.next != null)
        {
            curr = curr.next;
        }
        
        curr.next = head;
        head = kthNode.next;
        kthNode.next = null;
        
        
        return head;
    }
}


****************************************************************************************************************************************************************

COUNTER CLOCK-WISE

class Solution {
    public ListNode rotateRight(ListNode head, int k) 
    {
        ListNode curr = head;
        
        ListNode endNode = head;
        
        for(int i = 1 ; i < k-1 ; i++)
        {
               curr = curr.next;             
        }
        
        if(curr == null)return head;    
        
        ListNode kthNode = curr;
        
        while(curr.next != null)
        {
            curr = curr.next;
        }
        
        curr.next = head;
        head = kthNode.next;
        kthNode.next = null;
        
        
        return head;
    }
}
