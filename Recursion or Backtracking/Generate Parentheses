Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]


class Solution {
    public List<String> generateParenthesis(int n) {
        
     List<String> list = new ArrayList<>();
     String str = "";
	 int open = 0;
     int close = 0;
     int max = n;
     
     backTracking(list , str , open , close , max);
     return list;
     
   }
  
   void backTracking(List<String> list , String str , int open , int close , int max)
   {
     if(str.length() == max*2) //multiply 2 because pairs
     {
       list.add(str);
       return;
     }
     
     if(open < max) 			//Recursive call to add opening braces
     {
       backTracking(list , str + "(" ,open +1 , close , max);
     }
     if(close < open)			//Recursive call to add closing braces if opening is added
     {
       backTracking(list , str + ")" , open , close+1 , max);
     }
   }
}
