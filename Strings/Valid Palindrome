Valid Palindrome 1
Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Note: For the purpose of this problem, we define empty string as valid palindrome.

Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Example 2:

Input: "race a car"
Output: false

class Solution {
    public boolean isPalindrome(String s) 
    {
        
        s = s.replaceAll("\\W" , "").toLowerCase();
        
       
        if(s.length() < 3 && s.length() > 1)
        {
            if(s.charAt(0) != s.charAt(1))
            {
                return false;
            }
        }
        
        System.out.println(s);
        char [] arr = s.toCharArray();
        
        int j = arr.length-1;
        
        if(s.length() > 2)
        {
          while(j > arr.length/2)
        {
             for(int i = 0 ; i < arr.length/2 ; i++)
                {
                     System.out.println(arr[i]  + " " + arr[j]);
                     if(arr[i] != arr[j])
                        {
                         return false;
                        }
                 j--;
                }        
        }  
        }
        
               
        
        return true;
    }
}


Valid Palindrome 2
Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.

Example 1:
Input: "aba"
Output: True
Example 2:
Input: "abca"
Output: True
Explanation: You could delete the character 'c'.

class Solution {
    public boolean validPalindrome(String s) 
    {
        int left = 0;
        int right = s.length()-1;
        
        while(left < right)
        {
           if(s.charAt(left) != s.charAt(right))
           {
               return isPalindrome(s , left+1 , right) || isPalindrome(s , left , right-1);
           }
            
            left++;
            right--;
        }
        return true;
    }
    
    boolean isPalindrome(String s , int i , int j)
    {
         while(i < j)
         {
             if(s.charAt(i) != s.charAt(j))
             {
                 return false;
             }
             i++;
             j--;
         }
        
        return true;
    }
}
