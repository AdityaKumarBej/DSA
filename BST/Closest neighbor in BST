Closest Binary Search Tree Value

Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Example
Example1

Input: root = {5,4,9,2,#,8,10} and target = 6.124780
Output: 5
Explanation：
Binary tree {5,4,9,2,#,8,10},  denote the following structure:
        5
       / \
     4    9
    /    / \
   2    8  10
   
Example2

Input: root = {3,2,4,1} and target = 4.142857
Output: 4
Explanation：
Binary tree {3,2,4,1},  denote the following structure:
     3
    / \
  2    4
 /
1
Notice
Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.


    public int closestValue(TreeNode root, double target) {
        
       int abs_d = root.val;
       int t = (int)target;
       
       if(root == null)return -1;
       Stack<TreeNode> s = new Stack<TreeNode>();
       s.push(root);
       
       while(!s.isEmpty())
       {
           TreeNode curr = s.pop();
          
           if(Math.abs(curr.val - target) < Math.abs((abs_d-target)))
           {
               abs_d = curr.val;
           }
           
           if(curr.left != null)s.push(curr.left);
           if(curr.right != null)s.push(curr.right);
       }
       return abs_d;
    }
