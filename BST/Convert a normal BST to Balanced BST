Given a BST (Binary Search Tree) that may be unbalanced, convert it into a balanced BST that has minimum possible height.

Examples :

Input:
       30
      /
     20
    /
   10
Output:
     20
   /   \
 10     30


Input:
         4
        /
       3
      /
     2
    /
   1
Output:
      3            3           2
    /  \         /  \        /  \
   1    4   OR  2    4  OR  1    3   OR ..
    \          /                   \
     2        1                     4 

Input:
          4
        /   \
       3     5
      /       \
     2         6 
    /           \
   1             7
Output:
       4
    /    \
   2      6
 /  \    /  \
1    3  5    7 




class GfG
{
    Node buildBalancedTree(Node root) 
    {
        ArrayList<Node> list = new ArrayList<Node>();
        
        if(root == null)return null;
        
        inorder(root , list);
        Node [] arr = new Node[list.size()];
        for(int i = 0 ; i < list.size() ; i++)
        {
            arr[i] = list.get(i);
        }
        return construct(arr , 0 , arr.length-1);
    }
    
    void inorder(Node root , ArrayList<Node> list)
    {
        if(root != null)
        {
            inorder(root.left , list);
            list.add(root);
            inorder(root.right , list);
        }
    }
    
    Node construct(Node [] arr , int left , int right)
    {
       if(left > right)return null;
       int midpoint = left + (right-left)/2;
       
       Node root = new Node(arr[midpoint].data);
       
       root.left = construct(arr , left , midpoint-1);
       root.right = construct(arr , midpoint+1 , right);
       return root;
    }
}
