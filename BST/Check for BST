Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

class Solution {
    public boolean isValidBST(TreeNode root) 
    {
        
        boolean check = true;

        if(root == null)
            return true;
        
        ArrayList<TreeNode> list = new ArrayList<TreeNode>();
        inOrder(root , list);
        
        for(int i = 0 ; i < list.size() ; i++)
        {
            for(int j = i+1 ; j < list.size() ; j++)
            {
                if(list.get(i).val > list.get(j).val || list.get(i).val == list.get(j).val)
                {
                    return false;
                }
            }
        }
        return true;       

    }
    void inOrder(TreeNode root , ArrayList<TreeNode> list)
    {
        if(root != null)
        {
            inOrder(root.left , list);
            list.add(root);
            inOrder(root.right , list);
        }
    }
}
***********************************************************************************************
METHOD 2 : RECURSIVE

class Solution {
    public boolean isValidBST(TreeNode root) 
    {
        return validate(root , null , null);    
    }
    public boolean validate(TreeNode root , Integer min , Integer max)
    {
        if(root == null)return true;
        
        else if(max != null && root.val >= max || min != null && root.val <= min)
        {
            return false;
        }
        else
        {
            return validate(root.left , min , root.val) && validate(root.right , root.val , max);
        }
    }
}
