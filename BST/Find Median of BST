Given a Binary Search Tree, find median of it.

If no. of nodes are even: then median = ((n/2th node + (n+1)/2th node) /2
If no. of nodes are odd : then median = (n+1)/2th node.

Given BST(with odd no. of nodes) is : 
                    6
                 /    \
                3       8
              /   \    /  \
             1     4  7    9

Inorder of Given BST will be : 1, 3, 4, 6, 7, 8, 9
So, here median will 6.

Given BST(with even no. of nodes) is :  
                    6
                 /    \
                3       8
              /   \    /  
             1     4  7    

Inorder of Given BST will be : 1, 3, 4, 6, 7, 8
So, here median will  (4+6)/2 = 5.


 public static void findMedian(Node root)
    {
        ArrayList<Node> list = new ArrayList<Node>();
        inOrder(root , list);

        double even_result = 0;
        double odd_result = 0;
        double median = 0;
        int size = list.size();


        if(size > 2)
        {
            if(list.size() % 2 == 0)
            {
                even_result = (list.get(size/2).value + list.get((size/2)-1).value)/2.0;
            }
            else
            {
                odd_result = list.get((size+1)/2).value;
            }

            median = (size % 2 == 0) ? even_result : odd_result;
        }
        else if(size == 2)
        {
            median = (list.get(0).value + list.get(1).value)/2;
        }

        System.out.println(median);

    }


    static void inOrder(Node root , ArrayList<Node> list)
    {
        if(root != null)
        {
            inOrder(root.left , list);
            list.add(root);
            inOrder(root.right , list);
        }
    }
