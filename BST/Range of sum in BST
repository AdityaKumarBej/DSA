Range Sum of BST

Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23
 

Note:

The number of nodes in the tree is at most 10000.
The final answer is guaranteed to be less than 2^31.

METHOD 1 : SLOW - ITERATIVE

class Solution {
    public int rangeSumBST(TreeNode root, int L, int R) {
        
        if(root == null)return 0;
        int sum = 0;
        Stack<TreeNode> s = new Stack<TreeNode>();
        
        ArrayList<Integer> list = new ArrayList<Integer>();
        TreeNode curr = root;
        
        while(!s.isEmpty() || curr != null)
        {
            while(curr != null)
            {
                s.push(curr);
                curr = curr.left;
            }
            curr = s.pop();
            System.out.println(curr.val + " ");
            if(curr != null)
            {
                  list.add(curr.val);
            }
               
            curr = curr.right;
        }
        
        int index_l = list.indexOf(L);
        int index_r = list.indexOf(R);
        
        for(int i = index_l ; i <= index_r ; i++)
        {
            sum += list.get(i);
        }
        return sum;
    }
}

**************************************************************************************************

METHOD 2 : RECURSIVE - FASTER

class Solution {
    public int rangeSumBST(TreeNode root, int L, int R) {
        
        if(root == null)return 0;
        int sum = 0;
        
        if(root != null && root.val >= L && root.val <= R)
        {
            sum += root.val;
        }
        
        if(root.left != null)
        {
            sum += rangeSumBST(root.left , L , R);
        }
        
        if(root.right != null)
        {
            sum += rangeSumBST(root.right , L , R);
        }
        return sum;
    }
    
}
