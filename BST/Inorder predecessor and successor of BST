Inorder predecessor and successor for a given key in BST | Iterative Approach
Given a BST and a key. The task is to find the inorder successor and predecessor of the given key. In case, if either of predecessor or successor is not present, then print -1.

Examples:

Input:          50
               /  \
              /    \
            30     70
           / \     / \
          /   \   /   \
         20   40 60   80
            key = 65
Output: Predecessor : 60
        Successor : 70

Input:          50
               /  \
              /    \
            30     70
           / \     / \
          /   \   /   \
         20   40 60   80
            key = 100
Output: predecessor : 80
        successor : -1
Explanation: As no node in BST has key value greater 
than 100 so -1 is printed for successor.


class practice
{
    static int predecessor = 0;
    static int successor = 0;

    static class Node
    {
        Node left;
        Node right;
        int value;

        Node(int value)
        {
            this.value = value;
            left = null;
            right = null;
        }
    }

    public void find(Node root , int key)
    {
        if(root != null)
        {
            if(root.value == key)
            {
                if(root.left != null)
                {
                    Node temp = findMax(root.left);
                    predecessor = temp.value;
                }
                if(root.right != null)
                {
                    Node temp = findMin(root.right);
                    successor = temp.value;
                }
            }
            else if(key < root.value)
            {
                successor = root.value;
                find(root.left , key);
            }
            else if(key > root.value)
            {
                predecessor = root.value;
                find(root.right , key);
            }
        }
    }

    Node findMax(Node root)
    {
        if(root != null)
        {
            while(root.right != null)
            {
                root = root.right;
            }
        }
        return root;
    }

    Node findMin(Node root)
    {
        if(root != null)
        {
            while (root.left != null)
            {
                root = root.left;
            }
        }
        return root;
    }
    public static void main(String[] args)
    {Node root = new Node(20);
        root.left = new Node(10);
        root.right = new Node(30);
        root.left.left = new Node(5);
        root.left.left.right = new Node(7);
        root.left.right = new Node(15);
        root.right.left = new Node(25);
        root.right.right = new Node(35);
        root.left.right.left = new Node(13);
        root.left.right.right = new Node(18);
        practice i = new practice();
        i.find(root, 10);
        System.out.println("Inorder Successor of 10 is : " + successor
                + " and predecessor is : " + predecessor);
        i.find(root, 30);
        System.out.println("Inorder Successor of 30 is : " + successor
                + " and predecessor is : " + predecessor);

    }

}
